Goal: Final verification of the enhanced password gate + public waitlist email flow. If all checks pass, deploy to production.

Do not refactor or rename anything. Stick to verification and config. If a value is missing, ask before changing.

0) Config sanity (read-only)

List current relevant env vars (exact names/values redacted):

ADMIN_PREVIEW_PASSWORD (required)

ENABLE_PUBLIC_WAITLIST (true/false)

SENDGRID_API_KEY

SENDGRID_FROM (verified sender)

SENDGRID_TEMPLATE_ID (if using a template)

APP_BASE_URL or NEXT_PUBLIC_SITE_URL (whichever the app uses)

DATABASE_URL

Confirm the code paths that reference them (file + line ranges) and that names match.

1) Staging verification checklist

Gate behavior

With ADMIN_PREVIEW_PASSWORD set and not provided by the browser, load / → see branded Coming Soon.

Confirm <meta name="robots" content="noindex"> is present.

Confirm health endpoint(s) still bypass gate (report exact route + 200 response).

Password access

Enter correct password → full app loads.

Wrong password → friendly error, no leakage of internal routes.

Waitlist form (when disabled)

With ENABLE_PUBLIC_WAITLIST=false, ensure no form renders (or submit is blocked).

Waitlist form (when enabled)

Set ENABLE_PUBLIC_WAITLIST=true, restart app.

Submit a unique test email (use cyrus+waitlisttest@blue-tradie.example format).

Verify DB insert into public_waitlist with fields: email, created_at (and any others).

Attempt duplicate submit → confirm graceful “already on list” (and no duplicate row).

Email sending (SendGrid)

Confirm SendGrid client is called on successful submit (log success + message id).

Verify the from address is a verified sender; if not, use an already-verified one.

If a template is used, confirm SENDGRID_TEMPLATE_ID is applied; otherwise confirm plain-text/HTML payload.

Check logs for non-200 responses or rate limits.

Confirm the email is actually delivered to an inbox you control (attach masked headers: Message-ID, Date, From, To, Subject).

Edge cases & safety

Validate email format server-side; reject obvious garbage with friendly error.

Confirm server-side rate limit (e.g., ip+email) to avoid abuse (note the limiter you use).

Ensure the waitlist endpoint does not leak stack traces on error.

Confirm CSRF protection (or explicit justification if using a pure API POST with CORS guard).

Verify that unsub link or follow-up flow is possible (if you’re sending a confirmation, it should not look like unsolicited marketing).

2) Report back (must include)

Screenshot or console proof of:

Coming Soon page, password success, waitlist disabled state, waitlist enabled state.

DB row creation (redact email except local-part before +).

SendGrid success log + delivered email headers.

Short list of the exact files/lines touched (if any tiny fixes were required).

3) Production deploy (only if all ✅)

Set production env vars to the verified values.

Confirm ENABLE_PUBLIC_WAITLIST desired state for launch (default: true).

Deploy to www.bluetradie.com